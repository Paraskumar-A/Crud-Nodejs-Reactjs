project/
│
├── controllers/
│   └── authController.js
├── models/
│   └── User.js
├── routes/
│   └── auth.js
├── .env
├── server.js
└── package.json

============================================================================================================
1. Setup 
npm init -y
npm install express mongoose bcrypt jsonwebtoken dotenv nodemailer

============================================================================================================
2. server.js

require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');

const app = express();
app.use(express.json());

mongoose.connect(process.env.MONGO_URI)
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.log(err));

app.use('/api/auth', authRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

============================================================================================================
3. User Model (models/User.js)

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  resetToken: String,
  resetTokenExpire: Date
});

module.exports = mongoose.model('User', userSchema);

============================================================================================================
4. Auth Controller (controllers/authController.js)

const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');

exports.register = async (req, res) => {
  const { email, password } = req.body;
  try {
    const hashed = await bcrypt.hash(password, 10);
    const user = new User({ email, password: hashed });
    await user.save();
    res.status(201).json({ message: 'User registered.' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.login = async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: 'Invalid credentials' });

    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(400).json({ message: 'Invalid credentials' });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.json({ token });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.forgotPassword = async (req, res) => {
  const { email } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: 'User not found' });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '15m' });
    user.resetToken = token;
    user.resetTokenExpire = Date.now() + 15 * 60 * 1000;
    await user.save();

    // Nodemailer config (use your SMTP credentials or service)
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.MAIL_USER,
        pass: process.env.MAIL_PASS
      }
    });

    await transporter.sendMail({
      to: user.email,
      subject: 'Password Reset',
      html: `<p>Click <a href="${process.env.CLIENT_URL}/reset-password/${token}">here</a> to reset your password.</p>`
    });

    res.json({ message: 'Password reset link sent.' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.resetPassword = async (req, res) => {
  const { token, newPassword } = req.body;
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findOne({
      _id: decoded.id,
      resetToken: token,
      resetTokenExpire: { $gt: Date.now() }
    });

    if (!user) return res.status(400).json({ message: 'Invalid or expired token' });

    user.password = await bcrypt.hash(newPassword, 10);
    user.resetToken = undefined;
    user.resetTokenExpire = undefined;
    await user.save();

    res.json({ message: 'Password has been reset.' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

============================================================================================================
5. Routes (routes/auth.js)

const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');

router.post('/register', authController.register);
router.post('/login', authController.login);
router.post('/forgot-password', authController.forgotPassword);
router.post('/reset-password', authController.resetPassword);

module.exports = router;

============================================================================================================
6.  .env File

MONGO_URI=mongodb://localhost:27017/auth_demo
JWT_SECRET=your_jwt_secret
MAIL_USER=your_gmail@gmail.com
MAIL_PASS=your_gmail_app_password
CLIENT_URL=http://localhost:3000

============================================================================================================
7. Run 

npx nodemon server.js
node server.js

============================================================================================================
8. Test Api 

/api/auth/register
/api/auth/login
/api/auth/forgot-password
/api/auth/reset-password

Json
register
{ "email": "test@example.com", "password": "123456" }


login
{ "email": "test@example.com", "password": "123456" }

forgot-password
{ "email": "test@example.com" }

reset-password
{ "token": "JWT_TOKEN", "newPassword": "new1234" }